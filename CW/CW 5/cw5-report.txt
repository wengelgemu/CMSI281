/**
 * Classwork 5 - Report
 * Collect all answers to runtime analysis problems here.
 * 
 * GROUP MEMBERS:
 *   1. - Wengel Gemu
 *   2. - Sureena Hukkoo
 *   3. - Sumaiyah Lee
 */

 
// -------------------------------------------------------
// Problem 1
// -------------------------------------------------------
 
/**
 * Assumptions:
 *  - Let n = words.length, the number of words in the input sentence
 *  - Worst Case Assumption: There are no unique words, and goes through the entire
 * 		both for loops.
 */

/**
 * Returns the number of unique, unrepeated words that are found
 * in the given sentence sent
 * NOTE: This solution is not very good!!! It can be simplified
 * by using ArrayLists, but even those aren't the best choice here!
 * @param sent The sentence in which to count unique words
 * @return The number of unique, unrepeated words in sent
 */
 
public static int uniqueWords (String sent) {						// Cost:
    String[] words = sent.split(" ");								// c_1 split words	
    String currWord, compWord;										// c_2 initialized values
    int count = 0;													// c_3 initialized/assigned count

    // Compare each pair of words (again, warning: not great)
    for (int i = 0; i < words.length; i++) {						// c_4 * n outer loop, everything below is executed n times
        boolean repeatFound = false;								// c_5 * n assign boolean 
        currWord = words[i];										// c_6 * n assign words
        if (currWord.equals("")) { continue; }						// c_7 * n check if statement
        
        for (int j = 0; j < words.length; j++) {					// c_8 * n^2 inner loop, everything below is executed another n times
            compWord = words[j];									// c_9 * n^2 assign boolean
            if (currWord.equals(compWord) && i != j) {				// c_10 * n^2 check if statement
                repeatFound = true;									// c_11 * n^2 check if true
                break;
            }
        }
        
        // Only increment the count for the first occurrence of each match
        count += (repeatFound) ? 0 : 1;								// c_12 * n increment
    }

    return count;
}

/*
 * Total Cost Analysis:
 *   T(n) = c_1 + c_2 + c_3 + (n * (c_4 + c_5 + c_6 + c_7 + c_12 + (n * (c_8 + c_9 + c_10 + c_11))))
 *		  = O(1) + O(n) * O(n^2)
 *		  = O(n^2)
 */
 
 
// -------------------------------------------------------
// Problem 2
// -------------------------------------------------------

/**
 * Assumptions:
 *  - Let n = arr.size() , the size of the input ArrayList.
 *  - Worst Case Assumption: When we have to make the maximal number of swaps. 
 	  The longer the size of the arraylist (bigger the n) the longer it will take
 */
	public static ArrayList<String> reverse_A (ArrayList<String> arr) {		// Cost:
	    ArrayList<String> result = new ArrayList<String>();					// c_1 initialize for A
	    for (int i = 0; i < arr.size(); i++) {								// c_2 * n for loop
	        result.add(0, arr.get(i));										// c_3 * n adding onto result
	    }
	    return result;
	}
	  
	public static ArrayList<String> reverse_B (ArrayList<String> arr) {
	    ArrayList<String> result = new ArrayList<String>();					// c_4 initialize for B
	    for (int i = arr.size() - 1; i >= 0; i--) {							// c_5 * n for loop
	        result.add(arr.get(i));											// c_6 * n adding onto result
	    }
	    return result;
	}

/*
 * Total Cost Analysis:
 *   T(n) = c_1 + n * (c_2 + c_3) + c_4 + (n * (c_5 + c_6)
 *		  = O(1) + O(n) + O(1) + O(n)
 *		  = O(n)
 */
 
 
// -------------------------------------------------------
// Problem 3
// -------------------------------------------------------

/**
 * Assumptions:
 *  - Let n = a1.length and m = a2.length
 *  - Worst Case Assumption: Since inner loop relies on outer loop, 
 *	  this primarily effected by how large the first list grows. The longer the first list, 
 * 	  the more checks have to be made
 */
public static boolean isSubset (int[] a1, int[] a2) {				// Cost: 
    for (int i = 0; i < a1.length; i++) {							// c_1 * n outer loop
        boolean contained = false;									// c_2 * n initializing boolean
        for (int j = 0; j < a2.length; j++) {						// c_3 * n * m inner loop
            if (a1[i] == a2[j]) {									// c_4 * n * m if statement
                contained = true;									// c_5 * n * m assigning true
                break;
            }
        }
        if (!contained) {return false;}				  				// c_6 if statement
    }
    return true;
}

/*
 * Total Cost Analysis:
 *   T(n) = n * (c_1 + c_2 + m * (c_3 + c_4 + c_5)) + c_6
 *		  = O(n) + O(n * m) + O(1)
 *		  = O(n * m)
 */
 
 
// -------------------------------------------------------
// FINAL ANSWERS
// Please collect your final answers to the above, below
// -------------------------------------------------------

1. O(n^2)
2. O(n)
3. O(n * m)
